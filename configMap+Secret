Configuring a Pod to Use a ConfigMap

1.   Create a new file named config.txt with the following environment variables as key/value pairs on each line.

    DB_URL equates to localhost:3306
    DB_USERNAME equates to postgres

2.   Create a new ConfigMap named db-config from that file.
3.    Create a Pod named backend that uses the environment variables from the ConfigMap and runs the container with the image nginx.
4.    Shell into the Pod and print out the created environment variables. You should find DB_URL and DB_USERNAME with their appropriate values.

1.   Create a new file named config.txt with the following environment variables as key/value pairs on each line.
vi config.txt
DB_URL=localhost:3306
DB_USERNAME=postgres

2.   Create a new ConfigMap named db-config from that file.
kubectl create ConfigMap db-config --from-env-file=config.txt

3.    Create a Pod named backend that uses the environment variables from the ConfigMap and runs the container with the image nginx.
kubectl run backend1 --image=nginx --restart=Never -o yaml --dry-run > backendpod.yaml

vi backendpod.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: backend1
  name: backend1
spec:
  containers:
  - image: nginx
    name: backend1
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}

ADD TO FILE:

envFrom:
- configMapRef:
    name: db-config
kubectl create -f backendpod.yaml    

4.    Shell into the Pod and print out the created environment variables. You should find DB_URL and DB_USERNAME with their appropriate values.

kubectl exec backend -it -- sh
env


Configuring a Pod to Use a Secret

1.    Create a new Secret named db-credentials with the key/value pair db-password=passwd.
2.    Create a Pod named backend that defines uses the Secret as environment variable named DB_PASSWORD and runs the container with the image nginx.
3.    Shell into the Pod and print out the created environment variables. You should find DB_PASSWORD variable.


1.    Create a new Secret named db-credentials with the key/value pair db-password=passwd.
kubectl create secret generic db-credentials --from-literal=db-password=passwd
kubectl get secrets

2.    Create a Pod named backend that defines uses the Secret as environment variable named DB_PASSWORD and runs the container with the image nginx.
kubectl run backend --image=nginx --restart=Never --dry-run -o yaml > pod1.yaml
vi pod1.yaml
ADD TO FILE:
     env:
       - name: DB_PASSWORD
         valueFrom:
           secretKeyRef:
             name: db-credentials
             key: db-password

kubectl create -f pod1.yaml

kubectl exec pod1 -it -- sh
env | grep passwd

Creating a Security Context for a Pod

1.    Create a Pod named secured that uses the image nginx for a single container. Mount an emptyDir volume to the directory /data/app.
2.    Files created on the volume should use the filesystem group ID 3000.
3.    Get a shell to the running container and create a new file named logs.txt in the directory /data/app. List the contents of the directory and write them down.

1.    Create a Pod named secured that uses the image nginx for a single container. Mount an emptyDir volume to the directory /data/app.
kubectl run secured --image=nginx --restart=Never --dry-run -o yaml > secured.yaml

ADD TO FILE:
volumeMounts:
    - name: data-vol
      mountPath: /data/app
  volumes:
  - name: data-vol
    emptyDir: {}

2.    Files created on the volume should use the filesystem group ID 3000.
ADD TO FILE:
spec:
  securityContext:
    fsGroup: 3000
    
k create -f secured.yaml

3.    Get a shell to the running container and create a new file named logs.txt in the directory /data/app. 
List the contents of the directory and write them down.

k exec secured -it -- sh
cd /data/app
touch logs.txt
ls -l


Defining a Podâ€™s Resource Requirements

 Create a resource quota named apps under the namespace rq-demo using the following YAML definition in the file rq.yaml.

apiVersion: v1
kind: ResourceQuota
metadata:
  name: app
spec:
  hard:
    pods: "2"
    requests.cpu: "2"
    requests.memory: 500m

 1. Create a new Pod that exceeds the limits of the resource quota requirements. Write down the error message.
 2. Change the request limits to fulfill the requirements to ensure that the Pod could be created successfully. Write down the output of the command that renders the used amount of resources for the namespace.

kubectl create ns rq-demo
kubectl create -f rq.yaml --namespace=rq.yaml
kubectl describe quota -n rq-demo

create pod1.yaml 
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: mypod
  name: mypod
spec:
  containers:
  - image: nginx
    name: mypod
    resources:
      requests:
        memory: "1G"
        cpu: "400m"
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}

kubectl create -f pod.yaml --namespace=rq-demo
Error from server (Forbidden): error when creating "pod.yaml": pods "mypod" is forbidden: exceeded quota: app, requested: requests.memory=1G, used: requests.memory=0, limited: requests.memory=500m

vi pod1.yaml 
change memory to 400m
kubectl create -f pod.yaml --namespace=rq-demo
kubectl describe quota --namespace=rq-demo


Using a Service Account

1. Create a new service account named backend-team.
2. Print out the token for the service account in YAML format.
3. Create a Pod named backend that uses the image nginx and the identity backend-team for running processes.
4. Get a shell to the running container and print out the token of the service account.

1. Create a new service account named backend-team.
kubectl create serviceaccount backend-team

2. Print out the token for the service account in YAML format.
kubectl describe serviceaccount  backend-team
kubectl describe secret backend-team-token-hmdp8

3. Create a Pod named backend that uses the image nginx and the identity backend-team for running processes.
 kubectl run backend --image=nginx --restart=Never --serviceaccount=backend-team
 k get po/backend -o yaml
 k get po/backend -o yaml | grep serviceAccountName
  serviceAccountName: backend-team
